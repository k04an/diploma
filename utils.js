// –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const mysql = require('mysql2')
const mammoth = require('mammoth')
const jsdom = require('jsdom')
const {JSDOM} = jsdom
const config = require('./config')

let self = module.exports = {
    getDBConnection: () => {
        return mysql.createConnection({
            host: config.db.host,
            port: config.db.port,
            database: config.db.dbName,
            user: config.db.username,
            password: config.db.password
        })
    },

    sendError: (msg, systemDetails = null) => {
        return {
            status: 'error', details: msg, err: systemDetails
        }
    },

    execQuery: async (query, params = null) => {
        return new Promise((resolve, reject) => {
            let conn = self.getDBConnection()

            conn.connect((err) => {
                if (err) {
                    reject(self.sendError('The server has failed to connect to database', err))
                }

                conn.execute(query, params, (err, result) => {
                    if (err) {
                        reject(self.sendError('The server has failed to get data from database', err))
                    }

                    conn.end((err) => {
                        if (err) {
                            reject(self.sendError('The server has failed to end connection with database', err))
                        }
                    })

                    resolve(result)
                })
            })
        })
    },

    parseDocx: (path, callback) => {
        mammoth.convertToHtml({path: path})
            .then(data => {
                let dom = new JSDOM(data.value)
                let table = [];
                dom.window.document.querySelectorAll('tr').forEach((row, index) => {
                    let tableRow = []
                    for (let i = 0; i < row.cells.length; i++) {
                        tableRow.push(row.cells[i].textContent)
                    }
                    table.push(tableRow)
                })

                let schedule = {
                    group: table[0][1].slice(0, 3), lessons: {
                        monday: [], tuesday: [], wednesday: [], thursday: [], friday: [], saturday: []
                    }
                }

                for (let i = 3; i < 17; i++) {
                    schedule.lessons.monday.push({
                        index: table[i][0], name: table[i][1], class: table[i][2]
                    })
                    schedule.lessons.thursday.push({
                        index: table[i][4], name: table[i][5], class: table[i][6]
                    })
                }

                for (let i = 19; i < 33; i++) {
                    schedule.lessons.tuesday.push({
                        index: table[i][0], name: table[i][1], class: table[i][2]
                    })
                    schedule.lessons.friday.push({
                        index: table[i][4], name: table[i][5], class: table[i][6]
                    })
                }

                for (let i = 35; i < table.length; i++) {
                    schedule.lessons.wednesday.push({
                        index: table[i][0], name: table[i][1], class: table[i][2]
                    })
                    schedule.lessons.saturday.push({
                        index: table[i][4], name: table[i][5], class: table[i][6]
                    })
                }

                callback(schedule)
            })
    },

    insertData: async (date, data) => {
        return new Promise(async (resolve, reject) => {
            try {
                let originDate = new Date(Date.parse(date))
                if (originDate.getDay() != 1) {
                    reject(self.sendError('Passed date is not a monday')); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º, —Ç–æ –µ—Å—Ç—å –Ω–∞—á–∞–ª–æ–º –Ω–µ–¥–µ–ª–∏
                    console.log('‚ùå Date check failed')
                    return
                }
                console.log('‚úÖ Date check passed')

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
                let groupId = await getIdOrAdd('grp', 'grpId', 'grpNumber', data.group)

                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–Ω—è—Ç–∏—è—Ö –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                console.log('üîÉ Updating DB...')
                await self.execQuery(`DELETE FROM lesson WHERE date >= "${date}" AND date <= "${increaseDate(date, 5)}" AND grp = ${groupId};`)

                // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫–∏ –≤ –±–∞–∑—É –ø–æ –¥–Ω—è–º
                await insertDay(date, data.lessons.monday)
                await insertDay(increaseDate(date, 1), data.lessons.tuesday)
                await insertDay(increaseDate(date, 2), data.lessons.wednesday)
                await insertDay(increaseDate(date, 3), data.lessons.thursday)
                await insertDay(increaseDate(date, 4), data.lessons.friday)
                await insertDay(increaseDate(date, 5), data.lessons.saturday)

                console.log('‚úÖ DB has been updated')
                resolve()

                // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è—é—â–∞—è –≤ –±–∞–∑—É —É—Ä–æ–∫–∏ –Ω–∞ 1 –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                async function insertDay(date, lessons) {
                    for (const lesson of lessons) {
                        if (lesson.name === '') continue // –ï—Å–ª–∏ –∏–º—è –∑–∞–Ω—è—Ç–∏—è –ø—É—Å—Ç–æ–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.

                        // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–≤–º–∏
                        let subgroupSubjects = lesson.name.split('/')
                        let subgroupClassrooms = lesson.class.replace('  ', ' ').replace(/\n/g, ' ').split(' ')

                        for (const [index, subject] of subgroupSubjects.entries()) {
                            // –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞, –≤—ã–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ —É—Ä–æ–∫–∞. Null, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–¥–≥—Ä—É–ø–ø–∞–º –Ω–µ—Ç, –ß–∏—Å–ª–æ - –µ—Å—Ç—å.
                            let subgroupIndex
                            subgroupSubjects.length > 1 ? subgroupIndex = index : subgroupIndex = null

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –æ–¥–Ω–æ–π –∏–∑ –ø–æ–¥–≥—Ä—É–ø–ø –æ–∫–Ω–æ. –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –≤—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é.
                            let subgroupClassroom
                            subgroupClassrooms.length > 1 ? subgroupClassroom = subgroupClassrooms[index] : subgroupClassroom = subgroupClassrooms[0]

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
                            let subjectId = await getIdOrAdd('subject', 'subjectID', 'subjectName', subject.trim() === '' ? null : subject.trim())

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
                            let classroomId = await getIdOrAdd('classroom', 'classId', 'classNumber', subject.trim() === '' ? null : subgroupClassroom.trim())

                            await self.execQuery('INSERT INTO lesson (date, lessonOrder, grp, subject, classroom, subgrp) VALUES (?, ?, ? ,? ,? ,?)', [date, lesson.index, groupId, subjectId, classroomId, subgroupIndex])
                        }
                    }
                }

                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ id –∑–∞–ø–∏—Å–∏ –≤ –ë–î. –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤—Ç–∏–∏ –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–∫–æ–≤—É—é.
                async function getIdOrAdd(tableName, idColumnName, queryColumnName, queryValue) {
                    if (queryValue === null) return null

                    let id = await self.execQuery(`SELECT ${idColumnName} FROM ${tableName} WHERE ${queryColumnName} = ?`, [queryValue])
                    if (id.length == 0) {
                        let insertQueryResponse = await self.execQuery(`INSERT INTO ${tableName} (${queryColumnName}) VALUES (?)`, [queryValue])
                        id = insertQueryResponse.insertId
                    } else {
                        id = id[0][idColumnName]
                    }
                    return id
                }

                // –§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—è –¥–∞—Ç—É –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                function increaseDate(date, daysToAdd) {
                    date = new Date(Date.parse(date))
                    date.setDate(date.getDate() + daysToAdd)
                    return date.toISOString().substr(0, 10)
                }
            } catch (err) {
                reject(err)
            }
        })
    }
}